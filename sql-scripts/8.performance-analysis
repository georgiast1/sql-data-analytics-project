

--Analyze the yearly perfomrmance of products by comparing each product's sales to both it's average sales performance ant the previous year's sales

--Yearly performance of the products
SELECT 
YEAR(f.order_date) AS order_year,
p.product_name, 
SUM(f.sales_amount) AS current_sales
FROM gold.fact_sales f
LEFT JOIN gold.dim_products p
ON p.product_key=f.product_key
WHERE order_date IS NOT NULL
GROUP BY YEAR(f.order_date),p.product_name;

--Compare current sales with average product's sales	- using CTE
WITH yearly_product_sales AS(
	SELECT 
	YEAR(f.order_date) AS order_year,
	p.product_name, 
	SUM(f.sales_amount) AS current_sales
	FROM gold.fact_sales f
	LEFT JOIN gold.dim_products p
	ON p.product_key=f.product_key
	WHERE order_date IS NOT NULL
	GROUP BY YEAR(f.order_date),p.product_name)

SELECT order_year,
product_name,
current_sales,
AVG(current_sales) OVER(PARTITION BY product_name) AS average_sales,
current_sales-AVG(current_sales) OVER(PARTITION BY product_name) AS diff_avg,
CASE WHEN current_sales-AVG(current_sales) OVER(PARTITION BY product_name)>0 THEN 'Above Average'
	 WHEN current_sales-AVG(current_sales) OVER(PARTITION BY product_name)<0 THEN 'Below Average'
	 ELSE 'Average'
END AS avg_change
FROM yearly_product_sales
ORDER BY product_name, order_year

--ALSO compare with each product's last year
WITH yearly_product_sales AS(
	SELECT 
	YEAR(f.order_date) AS order_year,
	p.product_name, 
	SUM(f.sales_amount) AS current_sales
	FROM gold.fact_sales f
	LEFT JOIN gold.dim_products p
	ON p.product_key=f.product_key
	WHERE order_date IS NOT NULL
	GROUP BY YEAR(f.order_date),p.product_name)

SELECT order_year,
product_name,
current_sales,
AVG(current_sales) OVER(PARTITION BY product_name) AS average_sales,
current_sales-AVG(current_sales) OVER(PARTITION BY product_name) AS diff_avg,
CASE WHEN current_sales-AVG(current_sales) OVER(PARTITION BY product_name)>0 THEN 'Above Average'
	 WHEN current_sales-AVG(current_sales) OVER(PARTITION BY product_name)<0 THEN 'Below Average'
	 ELSE 'Average'
END AS avg_change,
--Year over Yera analysis
LAG(current_sales) OVER (PARTITION BY product_name ORDER BY order_year) AS py_sales,
current_sales - LAG(current_sales) OVER (PARTITION BY product_name ORDER BY order_year) AS diff_py,
CASE WHEN current_sales-LAG(current_sales) OVER (PARTITION BY product_name ORDER BY order_year)>0 THEN 'Increasing'
	 WHEN current_sales-LAG(current_sales) OVER (PARTITION BY product_name ORDER BY order_year)<0 THEN 'Decreasing'
	 ELSE 'No Change'
END AS py_change

FROM yearly_product_sales
ORDER BY product_name, order_year;
